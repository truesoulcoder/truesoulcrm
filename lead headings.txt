required fields needed from the csv file we upload:
FirstName, LastName, RecipientAddress, RecipientCity, RecipientState, RecipientPostalCode, OwnerType
PropertyAddress, PropertyCity, PropertyState, PropertyPostalCode, 
PropertyType, YearBuilt, SquareFootage, LotSizeSqFt, Baths, Beds,
PricePerSqFt, AssessedYear, AssessedTotal, MarketValue, WholesaleValue, AVM
Contact1Name, Contact1Phone_1, Contact1Email_1, Contact1Email_2, Contact1Email_3
Contact2Name, Contact2Phone_1, Contact2Email_1, Contact2Email_2, Contact2Email_3
Contact3Name, Contact3Phone_1, Contact3Email_1, Contact3Email_2, Contact3Email_3
MLS_Curr_ListingID, MLS_Curr_Status, MLS_Curr_ListDate, MLS_Curr_SoldDate, MLS_Curr_DaysOnMarket, 
MLS_Curr_ListPrice, MLS_Curr_SalePrice, MLS_Curr_ListAgentName, MLS_Curr_ListAgentPhone, 
MLS_Curr_ListAgentEmail, MLS_Curr_PricePerSqft, MLS_Curr_Sqft, MLS_Curr_Beds, MLS_Curr_Baths, 
MLS_Curr_Garage, MLS_Curr_YearBuilt, MLS_Curr_Photos


these are the fields we need to map to the columns in our tables.  this is how we created the properties and contacts table schema:


-- Step 1: Clean up old objects to ensure a fresh start
DROP TABLE IF EXISTS public.contacts;
DROP TABLE IF EXISTS public.properties;
DROP TYPE IF EXISTS public.contact_role;
DROP TYPE IF EXISTS public.lead_status;

-- Step 2: Create the ENUM type for Lead Status
CREATE TYPE public.lead_status AS ENUM (
    'New Lead',
    'Attempted to Contact',
    'Contacted',
    'Working/In Progress',
    'Contract Sent',
    'Qualified',
    'Unqualified/Disqualified',
    'Nurture',
    'Meeting Set',
    'Closed - Converted/Customer',
    'Closed - Not Converted/Opportunity Lost'
);

-- Step 3: Create the ENUM type for Contact Roles
CREATE TYPE public.contact_role AS ENUM ('owner', 'alternate_contact', 'mls_agent');

-- Step 4: Create the final 'properties' table (Corrected: agent info removed)
CREATE TABLE public.properties (
    property_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    status public.lead_status NOT NULL DEFAULT 'New Lead',
    notes TEXT,
    owner_type TEXT,
    property_address TEXT,
    property_city TEXT,
    property_state TEXT,
    property_postal_code TEXT,
    market_region TEXT,
    property_type TEXT,
    year_built INTEGER,
    square_footage INTEGER,
    lot_size_sqft NUMERIC,
    beds INTEGER,
    baths NUMERIC(4, 1),
    price_per_sqft NUMERIC(14, 2),
    assessed_year INTEGER,
    assessed_total NUMERIC(14, 2),
    market_value NUMERIC(14, 2),
    wholesale_value NUMERIC(14, 2),
    avm NUMERIC(14, 2),
    mls_listing_id TEXT,
    mls_status TEXT,
    mls_list_date DATE,
    mls_sold_date DATE,
    mls_days_on_market INTEGER,
    mls_list_price NUMERIC(14, 2),
    mls_sale_price NUMERIC(14, 2),
    mls_price_per_sqft NUMERIC(14,2),
    mls_sqft INTEGER,
    mls_beds INTEGER,
    mls_baths NUMERIC(4,1),
    mls_garage TEXT,
    mls_year_built INTEGER,
    mls_photos TEXT,
    CONSTRAINT properties_user_id_address_key UNIQUE (user_id, property_address, property_postal_code)
);

-- Step 5: Create the final 'contacts' table (this structure is correct)
CREATE TABLE public.contacts (
    contact_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    property_id UUID NOT NULL REFERENCES public.properties(property_id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    name TEXT,
    email TEXT,
    phone TEXT,
    role public.contact_role,
    mailing_address TEXT,
    mailing_city TEXT,
    mailing_state TEXT,
    mailing_postal_code TEXT,
    email_message_id TEXT,
    CONSTRAINT contacts_property_id_email_key UNIQUE (property_id, email)
);

-- Step 6: Ensure the 'set_updated_at' function exists and create triggers
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_property_update BEFORE UPDATE ON public.properties
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

CREATE TRIGGER handle_contact_update BEFORE UPDATE ON public.contacts
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


